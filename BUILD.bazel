# Build commands examples
#
# bazel build //:luau --platforms=//:android_arm64
# bazel build //:luau --platforms=//:macos_universal
# bazel build //:luau --platforms=//:ios_arm64
#

# ------------------------------
# Android
# ------------------------------

platform(
    name = "android_armv7",
    constraint_values = [
        "@platforms//os:android",
        "@platforms//cpu:armv7",
    ],
)

platform(
    name = "android_arm64",
    constraint_values = [
        "@platforms//os:android",
        "@platforms//cpu:arm64",
    ],
)

platform(
    name = "android_x86_32",
    constraint_values = [
        "@platforms//os:android",
        "@platforms//cpu:x86_32",
    ],
)

platform(
    name = "android_x86_64",
    constraint_values = [
        "@platforms//os:android",
        "@platforms//cpu:x86_64",
    ],
)

# ------------------------------
# iOS
# ------------------------------

platform(
    name = "ios_arm64",
    constraint_values = [
        "@platforms//os:ios",
        "@platforms//cpu:arm64",
    ],
)

# ------------------------------
# macOS
# ------------------------------

platform(
    name = "macos_universal",
    constraint_values = [
        "@platforms//os:macos",
    ],
)

# ------------------------------
# Windows
# ------------------------------

platform(
    name = "windows_x86_64",
    constraint_values = [
        "@platforms//os:windows",
        "@platforms//cpu:x86_64",
    ],
)

# ------------------------------
# Linux
# ------------------------------

# TODO: implement me!

# ------------------------------
# Wasm
# ------------------------------

# TODO: implement me!




load(
    "@rules_apple//apple:apple.bzl",
    "apple_static_library",
)
load("@rules_cc//cc:defs.bzl", "cc_library")

# ----------------------------------------
# Compiler-specific compiler flags
# ----------------------------------------

CLANG_COPTS = [
    "-std=c++17",
]

MSVC_COPTS = [
    "/std:c++17",
]

# TODO: if possible, select on the compiler instead of the platform
#       (or use the same compiler everywhere)
COMPILER_COPTS = select({
    "@platforms//os:windows": MSVC_COPTS,
    "//conditions:default": CLANG_COPTS,
})

# ----------------------------------------
# Platform-specific compiler flags
# ----------------------------------------

ANDROID_COPTS = [
    "-Wno-string-conversion",
]

PLATFORM_COPTS = select({
    "@platforms//os:android": ANDROID_COPTS,
    "//conditions:default": [],
})

COPTS = COMPILER_COPTS + PLATFORM_COPTS

# ----------------------------------------
# Targets
# ----------------------------------------

# luau (static library)

alias(
    name = "luau",
    actual = select({
        "@platforms//os:macos": ":luau-macos",
        "//conditions:default": ":luau-default",
    }),
)

luau_static_library_deps = [
    ":Luau.Analysis",
    ":Luau.Ast",
    # ":Luau.CLI.lib",
    ":Luau.CodeGen",
    ":Luau.Compiler",
    ":Luau.Config",
    ":Luau.EqSat",
    ":Luau.VM",
]

apple_static_library(
    name = "luau-macos",
    minimum_os_version = "11.0",
    platform_type = "macos",
    deps = luau_static_library_deps,
)

cc_static_library(
    name = "luau-default",
    deps = luau_static_library_deps,
)

# Luau.Common (only headers)

cc_library(
    name = "Luau.Common",
    hdrs = glob(["Common/include/Luau/*.h"]),
    copts = COPTS,
    includes = ["Common/include"],
    visibility = ["//visibility:public"],
)

# Luau.CLI.lib

cc_library(
    name = "Luau.CLI.lib",
    srcs = glob(["CLI/src/*.cpp"]),
    hdrs = glob(["CLI/include/Luau/*.h"]),
    copts = COPTS,
    includes = ["CLI/include"],
    visibility = ["//visibility:public"],
    deps = [
        ":Luau.Analysis",
        ":Luau.CodeGen",
        ":Luau.Compiler",
        ":Luau.Config",
        ":Luau.VM",
        ":isocline",
    ],
)

# Luau.Ast

cc_library(
    name = "Luau.Ast",
    srcs = glob(["Ast/src/*.cpp"]),
    hdrs = glob(["Ast/include/Luau/*.h"]),
    copts = COPTS,
    includes = ["Ast/include"],
    visibility = ["//visibility:public"],
    deps = [":Luau.Common"],
)

# Luau.Compiler

cc_library(
    name = "Luau.Compiler",
    srcs = glob([
        "Compiler/src/*.cpp",
        "Compiler/src/*.h",
    ]),
    hdrs = glob([
        "Compiler/include/*.h",
        "Compiler/include/Luau/*.h",
    ]),
    copts = COPTS,
    includes = ["Compiler/include"],
    visibility = ["//visibility:public"],
    deps = [":Luau.Ast"],
)

# Luau.Config

cc_library(
    name = "Luau.Config",
    srcs = glob(["Config/src/*.cpp"]),
    hdrs = glob(["Config/include/Luau/*.h"]),
    copts = COPTS,
    includes = ["Config/include"],
    visibility = ["//visibility:public"],
    deps = [":Luau.Ast"],
)

# Luau.Analysis

cc_library(
    name = "Luau.Analysis",
    srcs = glob([
        "Analysis/src/*.cpp",
        "Analysis/src/*.h",
    ]),
    hdrs = glob(["Analysis/include/Luau/*.h"]),
    copts = COPTS,
    includes = ["Analysis/include"],
    visibility = ["//visibility:public"],
    deps = [
        ":Luau.Ast",
        ":Luau.Common",
        ":Luau.Compiler",
        ":Luau.Config",
        ":Luau.EqSat",
        ":Luau.VM",
    ],
)

# Luau.EqSat

cc_library(
    name = "Luau.EqSat",
    srcs = glob(["EqSat/src/*.cpp"]),
    hdrs = glob(["EqSat/include/Luau/*.h"]),
    copts = COPTS,
    includes = ["EqSat/include"],
    visibility = ["//visibility:public"],
    deps = [":Luau.Common"],
)

# Luau.CodeGen

cc_library(
    name = "Luau.CodeGen",
    srcs = glob([
        "CodeGen/src/*.cpp",
        "CodeGen/src/*.h",
    ]),
    hdrs = glob([
        "CodeGen/include/*.h",
        "CodeGen/include/Luau/*.h",
    ]),
    copts = COPTS,
    includes = ["CodeGen/include"],
    linkstatic = select({
        "@platforms//os:android": True,
        "//conditions:default": False,
    }),
    visibility = ["//visibility:public"],
    deps = [
        ":Luau.Common",
        ":Luau.VM",
        ":Luau.VM.Internals",
    ],
)

# Luau.VM

cc_library(
    name = "Luau.VM",
    srcs = glob([
        "VM/src/*.cpp",
        "VM/src/*.h",
    ]),
    hdrs = glob(["VM/include/*.h"]),
    copts = COPTS,
    includes = ["VM/include"],
    visibility = ["//visibility:public"],
    deps = [":Luau.Common"],
)

# Luau.VM.Internals - expose private headers

cc_library(
    name = "Luau.VM.Internals",
    hdrs = glob(["VM/src/*.h"]),  # All internal VM headers
    includes = ["VM/src"],  # Make them available from VM/src
    visibility = [":__subpackages__"],  # Restrict visibility to just what needs it
)

# ----------------------------------------
# isocline
# ----------------------------------------

isocline_included_c_files = [
    "extern/isocline/src/editline_help.c",
    "extern/isocline/src/bbcode_colors.c",
    "extern/isocline/src/term_color.c",
    "extern/isocline/src/editline_history.c",
    "extern/isocline/src/editline_completion.c",
    "extern/isocline/src/wcwidth.c",
    "extern/isocline/src/attr.c",
    "extern/isocline/src/bbcode.c",
    "extern/isocline/src/editline.c",
    "extern/isocline/src/highlight.c",
    "extern/isocline/src/undo.c",
    "extern/isocline/src/history.c",
    "extern/isocline/src/completers.c",
    "extern/isocline/src/completions.c",
    "extern/isocline/src/term.c",
    "extern/isocline/src/tty_esc.c",
    "extern/isocline/src/tty.c",
    "extern/isocline/src/stringbuf.c",
    "extern/isocline/src/common.c",
]

cc_library(
    name = "isocline",
    srcs = glob(
        [
            "extern/isocline/src/*.c",
            "extern/isocline/src/*.h",
        ],
        # don't compile C files that are already included in other C files
        exclude = isocline_included_c_files,
    ),
    hdrs = [
        "extern/isocline/include/isocline.h",
    ] + glob([
        "extern/isocline/src/*.h",
    ]) + isocline_included_c_files,
    includes = [
        "extern/isocline/include",
        "extern/isocline/src",
    ],
    # copts = [
    #     "-include stdint.h",
    #     "-include stdbool.h",
    # ],
)
